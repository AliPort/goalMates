{"ast":null,"code":"function resolveVariantFromProps(props, definition, custom) {\n  let currentValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  let currentVelocity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n  /**\n   * If the variant definition is a function, resolve.\n   */\n  if (typeof definition === \"function\") {\n    definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n  }\n  /**\n   * If the variant definition is a variant label, or\n   * the function returned a variant label, resolve.\n   */\n\n\n  if (typeof definition === \"string\") {\n    definition = props.variants && props.variants[definition];\n  }\n  /**\n   * At this point we've resolved both functions and variant labels,\n   * but the resolved variant label might itself have been a function.\n   * If so, resolve. This can only have returned a valid target object.\n   */\n\n\n  if (typeof definition === \"function\") {\n    definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n  }\n\n  return definition;\n}\n\nexport { resolveVariantFromProps };","map":{"version":3,"names":["resolveVariantFromProps","props","definition","custom","currentValues","currentVelocity","undefined","variants"],"sources":["/Users/elizabethptack/Desktop/UWM/msp2/goalMates/frontend/node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs"],"sourcesContent":["function resolveVariantFromProps(props, definition, custom, currentValues = {}, currentVelocity = {}) {\n    /**\n     * If the variant definition is a function, resolve.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    /**\n     * If the variant definition is a variant label, or\n     * the function returned a variant label, resolve.\n     */\n    if (typeof definition === \"string\") {\n        definition = props.variants && props.variants[definition];\n    }\n    /**\n     * At this point we've resolved both functions and variant labels,\n     * but the resolved variant label might itself have been a function.\n     * If so, resolve. This can only have returned a valid target object.\n     */\n    if (typeof definition === \"function\") {\n        definition = definition(custom !== undefined ? custom : props.custom, currentValues, currentVelocity);\n    }\n    return definition;\n}\n\nexport { resolveVariantFromProps };\n"],"mappings":"AAAA,SAASA,uBAAT,CAAiCC,KAAjC,EAAwCC,UAAxC,EAAoDC,MAApD,EAAsG;EAAA,IAA1CC,aAA0C,uEAA1B,EAA0B;EAAA,IAAtBC,eAAsB,uEAAJ,EAAI;;EAClG;AACJ;AACA;EACI,IAAI,OAAOH,UAAP,KAAsB,UAA1B,EAAsC;IAClCA,UAAU,GAAGA,UAAU,CAACC,MAAM,KAAKG,SAAX,GAAuBH,MAAvB,GAAgCF,KAAK,CAACE,MAAvC,EAA+CC,aAA/C,EAA8DC,eAA9D,CAAvB;EACH;EACD;AACJ;AACA;AACA;;;EACI,IAAI,OAAOH,UAAP,KAAsB,QAA1B,EAAoC;IAChCA,UAAU,GAAGD,KAAK,CAACM,QAAN,IAAkBN,KAAK,CAACM,QAAN,CAAeL,UAAf,CAA/B;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACI,IAAI,OAAOA,UAAP,KAAsB,UAA1B,EAAsC;IAClCA,UAAU,GAAGA,UAAU,CAACC,MAAM,KAAKG,SAAX,GAAuBH,MAAvB,GAAgCF,KAAK,CAACE,MAAvC,EAA+CC,aAA/C,EAA8DC,eAA9D,CAAvB;EACH;;EACD,OAAOH,UAAP;AACH;;AAED,SAASF,uBAAT"},"metadata":{},"sourceType":"module"}