{"ast":null,"code":"import { transformPropOrder } from './transform.mjs';\nconst translateAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\",\n  transformPerspective: \"perspective\"\n};\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\n\nconst sortTransformProps = (a, b) => transformPropOrder.indexOf(a) - transformPropOrder.indexOf(b);\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\n\n\nfunction buildTransform(_ref, _ref2, transformIsDefault, transformTemplate) {\n  let {\n    transform,\n    transformKeys\n  } = _ref;\n  let {\n    enableHardwareAcceleration = true,\n    allowTransformNone = true\n  } = _ref2;\n  // The transform string we're going to build into.\n  let transformString = \"\"; // Transform keys into their default order - this will determine the output order.\n\n  transformKeys.sort(sortTransformProps); // Loop over each transform and build them into transformString\n\n  for (const key of transformKeys) {\n    transformString += `${translateAlias[key] || key}(${transform[key]}) `;\n  }\n\n  if (enableHardwareAcceleration && !transform.z) {\n    transformString += \"translateZ(0)\";\n  }\n\n  transformString = transformString.trim(); // If we have a custom `transform` template, pass our transform values and\n  // generated transformString to that before returning\n\n  if (transformTemplate) {\n    transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n  } else if (allowTransformNone && transformIsDefault) {\n    transformString = \"none\";\n  }\n\n  return transformString;\n}\n\nexport { buildTransform };","map":{"version":3,"names":["transformPropOrder","translateAlias","x","y","z","transformPerspective","sortTransformProps","a","b","indexOf","buildTransform","transformIsDefault","transformTemplate","transform","transformKeys","enableHardwareAcceleration","allowTransformNone","transformString","sort","key","trim"],"sources":["/Users/elizabethptack/Desktop/UWM/msp2/goalMates/frontend/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { transformPropOrder } from './transform.mjs';\n\nconst translateAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n    transformPerspective: \"perspective\",\n};\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\nconst sortTransformProps = (a, b) => transformPropOrder.indexOf(a) - transformPropOrder.indexOf(b);\n/**\n * Build a CSS transform style from individual x/y/scale etc properties.\n *\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\n * providing a transformTemplate function.\n */\nfunction buildTransform({ transform, transformKeys }, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\n    // The transform string we're going to build into.\n    let transformString = \"\";\n    // Transform keys into their default order - this will determine the output order.\n    transformKeys.sort(sortTransformProps);\n    // Loop over each transform and build them into transformString\n    for (const key of transformKeys) {\n        transformString += `${translateAlias[key] || key}(${transform[key]}) `;\n    }\n    if (enableHardwareAcceleration && !transform.z) {\n        transformString += \"translateZ(0)\";\n    }\n    transformString = transformString.trim();\n    // If we have a custom `transform` template, pass our transform values and\n    // generated transformString to that before returning\n    if (transformTemplate) {\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n    }\n    else if (allowTransformNone && transformIsDefault) {\n        transformString = \"none\";\n    }\n    return transformString;\n}\n\nexport { buildTransform };\n"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,iBAAnC;AAEA,MAAMC,cAAc,GAAG;EACnBC,CAAC,EAAE,YADgB;EAEnBC,CAAC,EAAE,YAFgB;EAGnBC,CAAC,EAAE,YAHgB;EAInBC,oBAAoB,EAAE;AAJH,CAAvB;AAMA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAUR,kBAAkB,CAACS,OAAnB,CAA2BF,CAA3B,IAAgCP,kBAAkB,CAACS,OAAnB,CAA2BD,CAA3B,CAArE;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,cAAT,cAAyHC,kBAAzH,EAA6IC,iBAA7I,EAAgK;EAAA,IAAxI;IAAEC,SAAF;IAAaC;EAAb,CAAwI;EAAA,IAA1G;IAAEC,0BAA0B,GAAG,IAA/B;IAAqCC,kBAAkB,GAAG;EAA1D,CAA0G;EAC5J;EACA,IAAIC,eAAe,GAAG,EAAtB,CAF4J,CAG5J;;EACAH,aAAa,CAACI,IAAd,CAAmBZ,kBAAnB,EAJ4J,CAK5J;;EACA,KAAK,MAAMa,GAAX,IAAkBL,aAAlB,EAAiC;IAC7BG,eAAe,IAAK,GAAEhB,cAAc,CAACkB,GAAD,CAAd,IAAuBA,GAAI,IAAGN,SAAS,CAACM,GAAD,CAAM,IAAnE;EACH;;EACD,IAAIJ,0BAA0B,IAAI,CAACF,SAAS,CAACT,CAA7C,EAAgD;IAC5Ca,eAAe,IAAI,eAAnB;EACH;;EACDA,eAAe,GAAGA,eAAe,CAACG,IAAhB,EAAlB,CAZ4J,CAa5J;EACA;;EACA,IAAIR,iBAAJ,EAAuB;IACnBK,eAAe,GAAGL,iBAAiB,CAACC,SAAD,EAAYF,kBAAkB,GAAG,EAAH,GAAQM,eAAtC,CAAnC;EACH,CAFD,MAGK,IAAID,kBAAkB,IAAIL,kBAA1B,EAA8C;IAC/CM,eAAe,GAAG,MAAlB;EACH;;EACD,OAAOA,eAAP;AACH;;AAED,SAASP,cAAT"},"metadata":{},"sourceType":"module"}