{"ast":null,"code":"import sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, isCloseTo, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\n\nconst animationTarget = 1000;\n\nfunction createProjectionNode(_ref) {\n  let {\n    attachResizeListener,\n    defaultParent,\n    measureScroll,\n    checkIsScrollRoot,\n    resetTransform\n  } = _ref;\n  return class ProjectionNode {\n    constructor(id) {\n      let latestValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n\n      this.isLayoutDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to actually\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n\n      this.eventHandlers = new Map(); // Note: Currently only running on root node\n\n      this.potentialNodes = new Map();\n\n      this.checkUpdateFailed = () => {\n        if (this.isUpdating) {\n          this.isUpdating = false;\n          this.clearAllSnapshots();\n        }\n      };\n\n      this.updateProjection = () => {\n        this.nodes.forEach(resolveTargetDelta);\n        this.nodes.forEach(calcProjection);\n      };\n\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n\n      this.sharedNodes = new Map();\n      this.id = id;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [...parent.path, parent] : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      id && this.root.registerPotentialNode(id, this);\n\n      for (let i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n\n    addEventListener(name, handler) {\n      if (!this.eventHandlers.has(name)) {\n        this.eventHandlers.set(name, new SubscriptionManager());\n      }\n\n      return this.eventHandlers.get(name).add(handler);\n    }\n\n    notifyListeners(name) {\n      const subscriptionManager = this.eventHandlers.get(name);\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n    }\n\n    hasListeners(name) {\n      return this.eventHandlers.has(name);\n    }\n\n    registerPotentialNode(id, node) {\n      this.potentialNodes.set(id, node);\n    }\n    /**\n     * Lifecycles\n     */\n\n\n    mount(instance) {\n      let isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _a;\n\n      if (this.instance) return;\n      this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n      this.instance = instance;\n      const {\n        layoutId,\n        layout,\n        visualElement\n      } = this.options;\n\n      if (visualElement && !visualElement.getInstance()) {\n        visualElement.mount(instance);\n      }\n\n      this.root.nodes.add(this);\n      (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n      this.id && this.root.potentialNodes.delete(this.id);\n\n      if (isLayoutDirty && (layout || layoutId)) {\n        this.isLayoutDirty = true;\n      }\n\n      if (attachResizeListener) {\n        let unblockTimeout;\n\n        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;\n\n        attachResizeListener(instance, () => {\n          this.root.updateBlockedByResize = true;\n          clearTimeout(unblockTimeout);\n          unblockTimeout = window.setTimeout(resizeUnblockUpdate, 250);\n\n          if (globalProjectionState.hasAnimatedSinceResize) {\n            globalProjectionState.hasAnimatedSinceResize = false;\n            this.nodes.forEach(finishAnimation);\n          }\n        });\n      }\n\n      if (layoutId) {\n        this.root.registerSharedNode(layoutId, this);\n      } // Only register the handler if it requires layout animation\n\n\n      if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n        this.addEventListener(\"didUpdate\", _ref2 => {\n          let {\n            delta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n            layout: newLayout\n          } = _ref2;\n\n          var _a, _b, _c, _d, _e;\n\n          if (this.isTreeAnimationBlocked()) {\n            this.target = undefined;\n            this.relativeTarget = undefined;\n            return;\n          } // TODO: Check here if an animation exists\n\n\n          const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n          const {\n            onLayoutAnimationStart,\n            onLayoutAnimationComplete\n          } = visualElement.getProps();\n          /**\n           * The target layout of the element might stay the same,\n           * but its position relative to its parent has changed.\n           */\n\n          const targetChanged = !this.targetLayout || !boxEquals(this.targetLayout, newLayout) || hasRelativeTargetChanged;\n          /**\n           * If the layout hasn't seemed to have changed, it might be that the\n           * element is visually in the same place in the document but its position\n           * relative to its parent has indeed changed. So here we check for that.\n           */\n\n          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n\n          if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {\n            if (this.resumeFrom) {\n              this.resumingFrom = this.resumeFrom;\n              this.resumingFrom.resumingFrom = undefined;\n            }\n\n            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n            const animationOptions = { ...getValueTransition(layoutTransition, \"layout\"),\n              onPlay: onLayoutAnimationStart,\n              onComplete: onLayoutAnimationComplete\n            };\n\n            if (visualElement.shouldReduceMotion) {\n              animationOptions.delay = 0;\n              animationOptions.type = false;\n            }\n\n            this.startAnimation(animationOptions);\n          } else {\n            /**\n             * If the layout hasn't changed and we have an animation that hasn't started yet,\n             * finish it immediately. Otherwise it will be animating from a location\n             * that was probably never commited to screen and look like a jumpy box.\n             */\n            if (!hasLayoutChanged && this.animationProgress === 0) {\n              this.finishAnimation();\n            }\n\n            this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n          }\n\n          this.targetLayout = newLayout;\n        });\n      }\n    }\n\n    unmount() {\n      var _a, _b;\n\n      this.options.layoutId && this.willUpdate();\n      this.root.nodes.remove(this);\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n      (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n      this.instance = undefined;\n      cancelSync.preRender(this.updateProjection);\n    } // only on the root\n\n\n    blockUpdate() {\n      this.updateManuallyBlocked = true;\n    }\n\n    unblockUpdate() {\n      this.updateManuallyBlocked = false;\n    }\n\n    isUpdateBlocked() {\n      return this.updateManuallyBlocked || this.updateBlockedByResize;\n    }\n\n    isTreeAnimationBlocked() {\n      var _a;\n\n      return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n    } // Note: currently only running on root node\n\n\n    startUpdate() {\n      var _a;\n\n      if (this.isUpdateBlocked()) return;\n      this.isUpdating = true;\n      (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n    }\n\n    willUpdate() {\n      let shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _a, _b, _c;\n\n      if (this.root.isUpdateBlocked()) {\n        (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n        return;\n      }\n\n      !this.root.isUpdating && this.root.startUpdate();\n      if (this.isLayoutDirty) return;\n      this.isLayoutDirty = true;\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        node.shouldResetTransform = true;\n        /**\n         * TODO: Check we haven't updated the scroll\n         * since the last didUpdate\n         */\n\n        node.updateScroll();\n      }\n\n      const {\n        layoutId,\n        layout\n      } = this.options;\n      if (layoutId === undefined && !layout) return;\n      const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n      this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      this.updateSnapshot();\n      shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n    } // Note: Currently only running on root node\n\n\n    didUpdate() {\n      const updateWasBlocked = this.isUpdateBlocked(); // When doing an instant transition, we skip the layout update,\n      // but should still clean up the measurements so that the next\n      // snapshot could be taken correctly.\n\n      if (updateWasBlocked) {\n        this.unblockUpdate();\n        this.clearAllSnapshots();\n        this.nodes.forEach(clearMeasurements);\n        return;\n      }\n\n      if (!this.isUpdating) return;\n      this.isUpdating = false;\n      /**\n       * Search for and mount newly-added projection elements.\n       *\n       * TODO: Every time a new component is rendered we could search up the tree for\n       * the closest mounted node and query from there rather than document.\n       */\n\n      if (this.potentialNodes.size) {\n        this.potentialNodes.forEach(mountNodeEarly);\n        this.potentialNodes.clear();\n      }\n      /**\n       * Write\n       */\n\n\n      this.nodes.forEach(resetTransformStyle);\n      /**\n       * Read ==================\n       */\n      // Update layout measurements of updated children\n\n      this.nodes.forEach(updateLayout);\n      /**\n       * Write\n       */\n      // Notify listeners that the layout is updated\n\n      this.nodes.forEach(notifyLayoutUpdate);\n      this.clearAllSnapshots(); // Flush any scheduled updates\n\n      flushSync.update();\n      flushSync.preRender();\n      flushSync.render();\n    }\n\n    clearAllSnapshots() {\n      this.nodes.forEach(clearSnapshot);\n      this.sharedNodes.forEach(removeLeadSnapshots);\n    }\n\n    scheduleUpdateProjection() {\n      sync.preRender(this.updateProjection, false, true);\n    }\n\n    scheduleCheckAfterUnmount() {\n      /**\n       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n       * we manually call didUpdate to give a chance to the siblings to animate.\n       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n       */\n      sync.postRender(() => {\n        if (this.isLayoutDirty) {\n          this.root.didUpdate();\n        } else {\n          this.root.checkUpdateFailed();\n        }\n      });\n    }\n    /**\n     * Update measurements\n     */\n\n\n    updateSnapshot() {\n      if (this.snapshot || !this.instance) return;\n      const measured = this.measure();\n      const layout = this.removeTransform(this.removeElementScroll(measured));\n      roundBox(layout);\n      this.snapshot = {\n        measured,\n        layout,\n        latestValues: {}\n      };\n    }\n\n    updateLayout() {\n      var _a;\n\n      if (!this.instance) return; // TODO: Incorporate into a forwarded scroll offset\n\n      this.updateScroll();\n\n      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n        return;\n      }\n      /**\n       * When a node is mounted, it simply resumes from the prevLead's\n       * snapshot instead of taking a new one, but the ancestors scroll\n       * might have updated while the prevLead is unmounted. We need to\n       * update the scroll again to make sure the layout we measure is\n       * up to date.\n       */\n\n\n      if (this.resumeFrom && !this.resumeFrom.instance) {\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          node.updateScroll();\n        }\n      }\n\n      const measured = this.measure();\n      roundBox(measured);\n      const prevLayout = this.layout;\n      this.layout = {\n        measured,\n        actual: this.removeElementScroll(measured)\n      };\n      this.layoutCorrected = createBox();\n      this.isLayoutDirty = false;\n      this.projectionDelta = undefined;\n      this.notifyListeners(\"measure\", this.layout.actual);\n      (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n    }\n\n    updateScroll() {\n      if (this.options.layoutScroll && this.instance) {\n        this.isScrollRoot = checkIsScrollRoot(this.instance);\n        this.scroll = measureScroll(this.instance);\n      }\n    }\n\n    resetTransform() {\n      var _a;\n\n      if (!resetTransform) return;\n      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n      const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n      const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n\n      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n        resetTransform(this.instance, transformTemplateValue);\n        this.shouldResetTransform = false;\n        this.scheduleRender();\n      }\n    }\n\n    measure() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return createBox();\n      const box = visualElement.measureViewportBox(); // Remove viewport scroll to give page-relative coordinates\n\n      const {\n        scroll\n      } = this.root;\n\n      if (scroll) {\n        translateAxis(box.x, scroll.x);\n        translateAxis(box.y, scroll.y);\n      }\n\n      return box;\n    }\n\n    removeElementScroll(box) {\n      const boxWithoutScroll = createBox();\n      copyBoxInto(boxWithoutScroll, box);\n      /**\n       * Performance TODO: Keep a cumulative scroll offset down the tree\n       * rather than loop back up the path.\n       */\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        const {\n          scroll,\n          options,\n          isScrollRoot\n        } = node;\n\n        if (node !== this.root && scroll && options.layoutScroll) {\n          /**\n           * If this is a new scroll root, we want to remove all previous scrolls\n           * from the viewport box.\n           */\n          if (isScrollRoot) {\n            copyBoxInto(boxWithoutScroll, box);\n            const {\n              scroll: rootScroll\n            } = this.root;\n            /**\n             * Undo the application of page scroll that was originally added\n             * to the measured bounding box.\n             */\n\n            if (rootScroll) {\n              translateAxis(boxWithoutScroll.x, -rootScroll.x);\n              translateAxis(boxWithoutScroll.y, -rootScroll.y);\n            }\n          }\n\n          translateAxis(boxWithoutScroll.x, scroll.x);\n          translateAxis(boxWithoutScroll.y, scroll.y);\n        }\n      }\n\n      return boxWithoutScroll;\n    }\n\n    applyTransform(box) {\n      let transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const withTransforms = createBox();\n      copyBoxInto(withTransforms, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n\n        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n          transformBox(withTransforms, {\n            x: -node.scroll.x,\n            y: -node.scroll.y\n          });\n        }\n\n        if (!hasTransform(node.latestValues)) continue;\n        transformBox(withTransforms, node.latestValues);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        transformBox(withTransforms, this.latestValues);\n      }\n\n      return withTransforms;\n    }\n\n    removeTransform(box) {\n      var _a;\n\n      const boxWithoutTransform = createBox();\n      copyBoxInto(boxWithoutTransform, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        if (!node.instance) continue;\n        if (!hasTransform(node.latestValues)) continue;\n        hasScale(node.latestValues) && node.updateSnapshot();\n        const sourceBox = createBox();\n        const nodeBox = node.measure();\n        copyBoxInto(sourceBox, nodeBox);\n        removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        removeBoxTransforms(boxWithoutTransform, this.latestValues);\n      }\n\n      return boxWithoutTransform;\n    }\n    /**\n     *\n     */\n\n\n    setTargetDelta(delta) {\n      this.targetDelta = delta;\n      this.root.scheduleUpdateProjection();\n    }\n\n    setOptions(options) {\n      this.options = { ...this.options,\n        ...options,\n        crossfade: options.crossfade !== undefined ? options.crossfade : true\n      };\n    }\n\n    clearMeasurements() {\n      this.scroll = undefined;\n      this.layout = undefined;\n      this.snapshot = undefined;\n      this.prevTransformTemplateValue = undefined;\n      this.targetDelta = undefined;\n      this.target = undefined;\n      this.isLayoutDirty = false;\n    }\n    /**\n     * Frame calculations\n     */\n\n\n    resolveTargetDelta() {\n      var _a;\n\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If we have no layout, we can't perform projection, so early return\n       */\n\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n       * a relativeParent. This will allow a component to perform scale correction\n       * even if no animation has started.\n       */\n      // TODO If this is unsuccessful this currently happens every frame\n\n      if (!this.targetDelta && !this.relativeTarget) {\n        // TODO: This is a semi-repetition of further down this function, make DRY\n        this.relativeParent = this.getClosestProjectingParent();\n\n        if (this.relativeParent && this.relativeParent.layout) {\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        }\n      }\n      /**\n       * If we have no relative target or no target delta our target isn't valid\n       * for this frame.\n       */\n\n\n      if (!this.relativeTarget && !this.targetDelta) return;\n      /**\n       * Lazy-init target data structure\n       */\n\n      if (!this.target) {\n        this.target = createBox();\n        this.targetWithTransforms = createBox();\n      }\n      /**\n       * If we've got a relative box for this component, resolve it into a target relative to the parent.\n       */\n\n\n      if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n        /**\n         * If we've only got a targetDelta, resolve it into a target\n         */\n      } else if (this.targetDelta) {\n        if (Boolean(this.resumingFrom)) {\n          // TODO: This is creating a new object every frame\n          this.target = this.applyTransform(this.layout.actual);\n        } else {\n          copyBoxInto(this.target, this.layout.actual);\n        }\n\n        applyBoxDelta(this.target, this.targetDelta);\n      } else {\n        /**\n         * If no target, use own layout as target\n         */\n        copyBoxInto(this.target, this.layout.actual);\n      }\n      /**\n       * If we've been told to attempt to resolve a relative target, do so.\n       */\n\n\n      if (this.attemptToResolveRelativeTarget) {\n        this.attemptToResolveRelativeTarget = false;\n        this.relativeParent = this.getClosestProjectingParent();\n\n        if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        }\n      }\n    }\n\n    getClosestProjectingParent() {\n      if (!this.parent || hasTransform(this.parent.latestValues)) return undefined;\n\n      if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n        return this.parent;\n      } else {\n        return this.parent.getClosestProjectingParent();\n      }\n    }\n\n    calcProjection() {\n      var _a;\n\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If this section of the tree isn't animating we can\n       * delete our target sources for the following frame.\n       */\n\n      this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n\n      if (!this.isTreeAnimating) {\n        this.targetDelta = this.relativeTarget = undefined;\n      }\n\n      if (!this.layout || !(layout || layoutId)) return;\n      const lead = this.getLead();\n      /**\n       * Reset the corrected box with the latest values from box, as we're then going\n       * to perform mutative operations on it.\n       */\n\n      copyBoxInto(this.layoutCorrected, this.layout.actual);\n      /**\n       * Apply all the parent deltas to this box to produce the corrected box. This\n       * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n       */\n\n      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n      const {\n        target\n      } = lead;\n      if (!target) return;\n\n      if (!this.projectionDelta) {\n        this.projectionDelta = createDelta();\n        this.projectionDeltaWithTransform = createDelta();\n      }\n\n      const prevTreeScaleX = this.treeScale.x;\n      const prevTreeScaleY = this.treeScale.y;\n      const prevProjectionTransform = this.projectionTransform;\n      /**\n       * Update the delta between the corrected box and the target box before user-set transforms were applied.\n       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n       * for our layout reprojection, but still allow them to be scaled correctly by the user.\n       * It might be that to simplify this we may want to accept that user-set scale is also corrected\n       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n       * to allow people to choose whether these styles are corrected based on just the\n       * layout reprojection or the final bounding box.\n       */\n\n      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n\n      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n        this.hasProjected = true;\n        this.scheduleRender();\n        this.notifyListeners(\"projectionUpdate\", target);\n      }\n    }\n\n    hide() {\n      this.isVisible = false; // TODO: Schedule render\n    }\n\n    show() {\n      this.isVisible = true; // TODO: Schedule render\n    }\n\n    scheduleRender() {\n      let notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _a, _b, _c;\n\n      (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n      notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n\n      if (this.resumingFrom && !this.resumingFrom.instance) {\n        this.resumingFrom = undefined;\n      }\n    }\n\n    setAnimationOrigin(delta) {\n      let hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _a;\n\n      const snapshot = this.snapshot;\n      const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n      const mixedValues = { ...this.latestValues\n      };\n      const targetDelta = createDelta();\n      this.relativeTarget = this.relativeTargetOrigin = undefined;\n      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n      const relativeLayout = createBox();\n      const isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n      const isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n      this.animationProgress = 0;\n\n      this.mixTargetDelta = latest => {\n        var _a;\n\n        const progress = latest / 1000;\n        mixAxisDelta(targetDelta.x, delta.x, progress);\n        mixAxisDelta(targetDelta.y, delta.y, progress);\n        this.setTargetDelta(targetDelta);\n\n        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n          calcRelativePosition(relativeLayout, this.layout.actual, this.relativeParent.layout.actual);\n          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n        }\n\n        if (isSharedLayoutAnimation) {\n          this.animationValues = mixedValues;\n          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n        }\n\n        this.root.scheduleUpdateProjection();\n        this.scheduleRender();\n        this.animationProgress = progress;\n      };\n\n      this.mixTargetDelta(0);\n    }\n\n    startAnimation(options) {\n      var _a, _b;\n\n      this.notifyListeners(\"animationStart\");\n      (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n\n      if (this.resumingFrom) {\n        (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n      }\n\n      if (this.pendingAnimation) {\n        cancelSync.update(this.pendingAnimation);\n        this.pendingAnimation = undefined;\n      }\n      /**\n       * Start the animation in the next frame to have a frame with progress 0,\n       * where the target is the same as when the animation started, so we can\n       * calculate the relative positions correctly for instant transitions.\n       */\n\n\n      this.pendingAnimation = sync.update(() => {\n        globalProjectionState.hasAnimatedSinceResize = true;\n        this.currentAnimation = animate(0, animationTarget, { ...options,\n          onUpdate: latest => {\n            var _a;\n\n            this.mixTargetDelta(latest);\n            (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n          },\n          onComplete: () => {\n            var _a;\n\n            (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n            this.completeAnimation();\n          }\n        });\n\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = this.currentAnimation;\n        }\n\n        this.pendingAnimation = undefined;\n      });\n    }\n\n    completeAnimation() {\n      var _a;\n\n      if (this.resumingFrom) {\n        this.resumingFrom.currentAnimation = undefined;\n        this.resumingFrom.preserveOpacity = undefined;\n      }\n\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n      this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n      this.notifyListeners(\"animationComplete\");\n    }\n\n    finishAnimation() {\n      var _a;\n\n      if (this.currentAnimation) {\n        (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n        this.currentAnimation.stop();\n      }\n\n      this.completeAnimation();\n    }\n\n    applyTransformsToTarget() {\n      const lead = this.getLead();\n      let {\n        targetWithTransforms,\n        target,\n        layout,\n        latestValues\n      } = lead;\n      if (!targetWithTransforms || !target || !layout) return;\n      /**\n       * If we're only animating position, and this element isn't the lead element,\n       * then instead of projecting into the lead box we instead want to calculate\n       * a new target that aligns the two boxes but maintains the layout shape.\n       */\n\n      if (this !== lead && this.layout && layout && shouldAnimatePositionOnly(this.options.animationType, this.layout.actual, layout.actual)) {\n        target = this.target || createBox();\n        const xLength = calcLength(this.layout.actual.x);\n        target.x.min = lead.target.x.min;\n        target.x.max = target.x.min + xLength;\n        const yLength = calcLength(this.layout.actual.y);\n        target.y.min = lead.target.y.min;\n        target.y.max = target.y.min + yLength;\n      }\n\n      copyBoxInto(targetWithTransforms, target);\n      /**\n       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n       * This is the final box that we will then project into by calculating a transform delta and\n       * applying it to the corrected box.\n       */\n\n      transformBox(targetWithTransforms, latestValues);\n      /**\n       * Update the delta between the corrected box and the final target box, after\n       * user-set transforms are applied to it. This will be used by the renderer to\n       * create a transform style that will reproject the element from its actual layout\n       * into the desired bounding box.\n       */\n\n      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n    }\n\n    registerSharedNode(layoutId, node) {\n      var _a, _b, _c;\n\n      if (!this.sharedNodes.has(layoutId)) {\n        this.sharedNodes.set(layoutId, new NodeStack());\n      }\n\n      const stack = this.sharedNodes.get(layoutId);\n      stack.add(node);\n      node.promote({\n        transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n        preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n      });\n    }\n\n    isLead() {\n      const stack = this.getStack();\n      return stack ? stack.lead === this : true;\n    }\n\n    getLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n    }\n\n    getPrevLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n    }\n\n    getStack() {\n      const {\n        layoutId\n      } = this.options;\n      if (layoutId) return this.root.sharedNodes.get(layoutId);\n    }\n\n    promote() {\n      let {\n        needsReset,\n        transition,\n        preserveFollowOpacity\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const stack = this.getStack();\n      if (stack) stack.promote(this, preserveFollowOpacity);\n\n      if (needsReset) {\n        this.projectionDelta = undefined;\n        this.needsReset = true;\n      }\n\n      if (transition) this.setOptions({\n        transition\n      });\n    }\n\n    relegate() {\n      const stack = this.getStack();\n\n      if (stack) {\n        return stack.relegate(this);\n      } else {\n        return false;\n      }\n    }\n\n    resetRotation() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return; // If there's no detected rotation values, we can early return without a forced render.\n\n      let hasRotate = false; // Keep a record of all the values we've reset\n\n      const resetValues = {}; // Check the rotate value of all axes and reset to 0\n\n      for (let i = 0; i < transformAxes.length; i++) {\n        const axis = transformAxes[i];\n        const key = \"rotate\" + axis; // If this rotation doesn't exist as a motion value, then we don't\n        // need to reset it\n\n        if (!visualElement.getStaticValue(key)) {\n          continue;\n        }\n\n        hasRotate = true; // Record the rotation and then temporarily set it to 0\n\n        resetValues[key] = visualElement.getStaticValue(key);\n        visualElement.setStaticValue(key, 0);\n      } // If there's no rotation values, we don't need to do any more.\n\n\n      if (!hasRotate) return; // Force a render of this element to apply the transform with all rotations\n      // set to 0.\n\n      visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender(); // Put back all the values we reset\n\n      for (const key in resetValues) {\n        visualElement.setStaticValue(key, resetValues[key]);\n      } // Schedule a render for the next frame. This ensures we won't visually\n      // see the element with the reset rotate value applied.\n\n\n      visualElement.scheduleRender();\n    }\n\n    getProjectionStyles() {\n      let styleProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _a, _b, _c; // TODO: Return lifecycle-persistent object\n\n\n      const styles = {};\n      if (!this.instance || this.isSVG) return styles;\n\n      if (!this.isVisible) {\n        return {\n          visibility: \"hidden\"\n        };\n      } else {\n        styles.visibility = \"\";\n      }\n\n      const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n\n      if (this.needsReset) {\n        this.needsReset = false;\n        styles.opacity = \"\";\n        styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n        return styles;\n      }\n\n      const lead = this.getLead();\n\n      if (!this.projectionDelta || !this.layout || !lead.target) {\n        const emptyStyles = {};\n\n        if (this.options.layoutId) {\n          emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        }\n\n        if (this.hasProjected && !hasTransform(this.latestValues)) {\n          emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n          this.hasProjected = false;\n        }\n\n        return emptyStyles;\n      }\n\n      const valuesToRender = lead.animationValues || lead.latestValues;\n      this.applyTransformsToTarget();\n      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n\n      if (transformTemplate) {\n        styles.transform = transformTemplate(valuesToRender, styles.transform);\n      }\n\n      const {\n        x,\n        y\n      } = this.projectionDelta;\n      styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n\n      if (lead.animationValues) {\n        /**\n         * If the lead component is animating, assign this either the entering/leaving\n         * opacity\n         */\n        styles.opacity = lead === this ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n      } else {\n        /**\n         * Or we're not animating at all, set the lead component to its actual\n         * opacity and other components to hidden.\n         */\n        styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n      }\n      /**\n       * Apply scale correction\n       */\n\n\n      for (const key in scaleCorrectors) {\n        if (valuesToRender[key] === undefined) continue;\n        const {\n          correct,\n          applyTo\n        } = scaleCorrectors[key];\n        const corrected = correct(valuesToRender[key], lead);\n\n        if (applyTo) {\n          const num = applyTo.length;\n\n          for (let i = 0; i < num; i++) {\n            styles[applyTo[i]] = corrected;\n          }\n        } else {\n          styles[key] = corrected;\n        }\n      }\n      /**\n       * Disable pointer events on follow components. This is to ensure\n       * that if a follow component covers a lead component it doesn't block\n       * pointer events on the lead.\n       */\n\n\n      if (this.options.layoutId) {\n        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n      }\n\n      return styles;\n    }\n\n    clearSnapshot() {\n      this.resumeFrom = this.snapshot = undefined;\n    } // Only run on root\n\n\n    resetTree() {\n      this.root.nodes.forEach(node => {\n        var _a;\n\n        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      });\n      this.root.nodes.forEach(clearMeasurements);\n      this.root.sharedNodes.clear();\n    }\n\n  };\n}\n\nfunction updateLayout(node) {\n  node.updateLayout();\n}\n\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c;\n\n  const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    const {\n      actual: layout,\n      measured: measuredLayout\n    } = node.layout;\n    const {\n      animationType\n    } = node.options; // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n\n    if (animationType === \"size\") {\n      eachAxis(axis => {\n        const axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        const length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (shouldAnimatePositionOnly(animationType, snapshot.layout, layout)) {\n      eachAxis(axis => {\n        const axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        const length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n\n    const layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layout);\n    const visualDelta = createDelta();\n\n    if (snapshot.isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layout);\n    }\n\n    const hasLayoutChanged = !isDeltaZero(layoutDelta);\n    let hasRelativeTargetChanged = false;\n\n    if (!node.resumeFrom) {\n      node.relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n\n      if (node.relativeParent && !node.relativeParent.resumeFrom) {\n        const {\n          snapshot: parentSnapshot,\n          layout: parentLayout\n        } = node.relativeParent;\n\n        if (parentSnapshot && parentLayout) {\n          const relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n          const relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.actual);\n\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n        }\n      }\n    }\n\n    node.notifyListeners(\"didUpdate\", {\n      layout,\n      snapshot,\n      delta: visualDelta,\n      layoutDelta,\n      hasLayoutChanged,\n      hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n\n\n  node.options.transition = undefined;\n}\n\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\n\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\n\nfunction resetTransformStyle(node) {\n  const {\n    visualElement\n  } = node.options;\n\n  if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notifyBeforeLayoutMeasure();\n  }\n\n  node.resetTransform();\n}\n\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\n\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\n\nfunction calcProjection(node) {\n  node.calcProjection();\n}\n\nfunction resetRotation(node) {\n  node.resetRotation();\n}\n\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\n\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\n\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\n\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\n\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\n\nconst defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nfunction mountNodeEarly(node, id) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  let searchNode = node.root;\n\n  for (let i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n\n  const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  const element = searchElement.querySelector(`[data-projection-id=\"${id}\"]`);\n  if (element) node.mount(element, true);\n}\n\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\n\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\n\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n  return animationType === \"position\" || animationType === \"preserve-aspect\" && !isCloseTo(aspectRatio(snapshot), aspectRatio(layout), 0.2);\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };","map":{"version":3,"names":["sync","cancelSync","flushSync","mix","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","isCloseTo","aspectRatio","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","FlatTree","resolveMotionValue","globalProjectionState","transformAxes","animationTarget","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","constructor","id","latestValues","parent","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","addEventListener","name","handler","has","set","get","add","notifyListeners","subscriptionManager","args","notify","hasListeners","node","mount","instance","_a","SVGElement","tagName","layoutId","layout","visualElement","getInstance","delete","unblockTimeout","resizeUnblockUpdate","clearTimeout","window","setTimeout","hasAnimatedSinceResize","finishAnimation","registerSharedNode","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","_b","_c","_d","_e","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","delay","type","startAnimation","isLead","onExitComplete","call","unmount","willUpdate","remove","getStack","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","shouldNotifyListeners","updateScroll","transformTemplate","prevTransformTemplateValue","updateSnapshot","didUpdate","updateWasBlocked","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measured","measure","removeTransform","removeElementScroll","roundBox","alwaysMeasureLayout","prevLayout","actual","layoutCorrected","projectionDelta","notifyLayoutMeasure","layoutScroll","isScrollRoot","scroll","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","box","measureViewportBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","Boolean","attemptToResolveRelativeTarget","pendingAnimation","lead","getLead","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","hide","show","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isShared","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","min","max","yLength","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasRotate","resetValues","axis","key","getStaticValue","setStaticValue","syncRender","getProjectionStyles","styleProp","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","notifyBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"sources":["/Users/elizabethptack/Desktop/UWM/msp2/goalMates/frontend/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero, isCloseTo, aspectRatio } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(id, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to actually\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = () => {\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.id = id;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            id && this.root.registerPotentialNode(id, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(id, node) {\n            this.potentialNodes.set(id, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            var _a;\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.getInstance()) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.id && this.root.potentialNodes.delete(this.id);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let unblockTimeout;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    clearTimeout(unblockTimeout);\n                    unblockTimeout = window.setTimeout(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    var _a, _b, _c, _d, _e;\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            this.finishAnimation();\n                        }\n                        this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            var _a, _b, _c;\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                /**\n                 * TODO: Check we haven't updated the scroll\n                 * since the last didUpdate\n                 */\n                node.updateScroll();\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            const measured = this.measure();\n            const layout = this.removeTransform(this.removeElementScroll(measured));\n            roundBox(layout);\n            this.snapshot = {\n                measured,\n                layout,\n                latestValues: {},\n            };\n        }\n        updateLayout() {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const measured = this.measure();\n            roundBox(measured);\n            const prevLayout = this.layout;\n            this.layout = {\n                measured,\n                actual: this.removeElementScroll(measured),\n            };\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.actual);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n        }\n        updateScroll() {\n            if (this.options.layoutScroll && this.instance) {\n                this.isScrollRoot = checkIsScrollRoot(this.instance);\n                this.scroll = measureScroll(this.instance);\n            }\n        }\n        resetTransform() {\n            var _a;\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.x);\n                translateAxis(box.y, scroll.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options, isScrollRoot } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (isScrollRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.x);\n                    translateAxis(boxWithoutScroll.y, scroll.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.x,\n                        y: -node.scroll.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            var _a;\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measure();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            var _a;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent && this.relativeParent.layout) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.actual);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.actual);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.actual);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent &&\n                    Boolean(this.relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !this.relativeParent.options.layoutScroll &&\n                    this.relativeParent.target) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent || hasTransform(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            var _a;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            const lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.actual);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a, _b, _c;\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            var _a;\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n            const isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                var _a;\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, this.layout.actual, this.relativeParent.layout.actual);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        }\n        startAnimation(options) {\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        var _a;\n                        this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    },\n                    onComplete: () => {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.actual, layout.actual)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.actual.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.actual.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its actual layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            // Keep a record of all the values we've reset\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const axis = transformAxes[i];\n                const key = \"rotate\" + axis;\n                // If this rotation doesn't exist as a motion value, then we don't\n                // need to reset it\n                if (!visualElement.getStaticValue(key)) {\n                    continue;\n                }\n                hasRotate = true;\n                // Record the rotation and then temporarily set it to 0\n                resetValues[key] = visualElement.getStaticValue(key);\n                visualElement.setStaticValue(key, 0);\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b, _c;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its actual\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                const corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { actual: layout, measured: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layout, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layout);\n        const visualDelta = createDelta();\n        if (snapshot.isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layout);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            node.relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (node.relativeParent && !node.relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = node.relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.actual);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notifyBeforeLayoutMeasure();\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, id) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${id}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isCloseTo(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}