{"ast":null,"code":"/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\n\nconst observers = new WeakMap();\n\nconst fireObserverCallback = entry => {\n  const callback = observerCallbacks.get(entry.target);\n  callback && callback(entry);\n};\n\nconst fireAllObserverCallbacks = entries => {\n  entries.forEach(fireObserverCallback);\n};\n\nfunction initIntersectionObserver(_ref) {\n  let {\n    root,\n    ...options\n  } = _ref;\n  const lookupRoot = root || document;\n  /**\n   * If we don't have an observer lookup map for this root, create one.\n   */\n\n  if (!observers.has(lookupRoot)) {\n    observers.set(lookupRoot, {});\n  }\n\n  const rootObservers = observers.get(lookupRoot);\n  const key = JSON.stringify(options);\n  /**\n   * If we don't have an observer for this combination of root and settings,\n   * create one.\n   */\n\n  if (!rootObservers[key]) {\n    rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, {\n      root,\n      ...options\n    });\n  }\n\n  return rootObservers[key];\n}\n\nfunction observeIntersection(element, options, callback) {\n  const rootInteresectionObserver = initIntersectionObserver(options);\n  observerCallbacks.set(element, callback);\n  rootInteresectionObserver.observe(element);\n  return () => {\n    observerCallbacks.delete(element);\n    rootInteresectionObserver.unobserve(element);\n  };\n}\n\nexport { observeIntersection };","map":{"version":3,"names":["observerCallbacks","WeakMap","observers","fireObserverCallback","entry","callback","get","target","fireAllObserverCallbacks","entries","forEach","initIntersectionObserver","root","options","lookupRoot","document","has","set","rootObservers","key","JSON","stringify","IntersectionObserver","observeIntersection","element","rootInteresectionObserver","observe","delete","unobserve"],"sources":["/Users/elizabethptack/Desktop/UWM/msp2/goalMates/frontend/node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs"],"sourcesContent":["/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,iBAAiB,GAAG,IAAIC,OAAJ,EAA1B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAG,IAAID,OAAJ,EAAlB;;AACA,MAAME,oBAAoB,GAAIC,KAAD,IAAW;EACpC,MAAMC,QAAQ,GAAGL,iBAAiB,CAACM,GAAlB,CAAsBF,KAAK,CAACG,MAA5B,CAAjB;EACAF,QAAQ,IAAIA,QAAQ,CAACD,KAAD,CAApB;AACH,CAHD;;AAIA,MAAMI,wBAAwB,GAAIC,OAAD,IAAa;EAC1CA,OAAO,CAACC,OAAR,CAAgBP,oBAAhB;AACH,CAFD;;AAGA,SAASQ,wBAAT,OAAwD;EAAA,IAAtB;IAAEC,IAAF;IAAQ,GAAGC;EAAX,CAAsB;EACpD,MAAMC,UAAU,GAAGF,IAAI,IAAIG,QAA3B;EACA;AACJ;AACA;;EACI,IAAI,CAACb,SAAS,CAACc,GAAV,CAAcF,UAAd,CAAL,EAAgC;IAC5BZ,SAAS,CAACe,GAAV,CAAcH,UAAd,EAA0B,EAA1B;EACH;;EACD,MAAMI,aAAa,GAAGhB,SAAS,CAACI,GAAV,CAAcQ,UAAd,CAAtB;EACA,MAAMK,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAeR,OAAf,CAAZ;EACA;AACJ;AACA;AACA;;EACI,IAAI,CAACK,aAAa,CAACC,GAAD,CAAlB,EAAyB;IACrBD,aAAa,CAACC,GAAD,CAAb,GAAqB,IAAIG,oBAAJ,CAAyBd,wBAAzB,EAAmD;MAAEI,IAAF;MAAQ,GAAGC;IAAX,CAAnD,CAArB;EACH;;EACD,OAAOK,aAAa,CAACC,GAAD,CAApB;AACH;;AACD,SAASI,mBAAT,CAA6BC,OAA7B,EAAsCX,OAAtC,EAA+CR,QAA/C,EAAyD;EACrD,MAAMoB,yBAAyB,GAAGd,wBAAwB,CAACE,OAAD,CAA1D;EACAb,iBAAiB,CAACiB,GAAlB,CAAsBO,OAAtB,EAA+BnB,QAA/B;EACAoB,yBAAyB,CAACC,OAA1B,CAAkCF,OAAlC;EACA,OAAO,MAAM;IACTxB,iBAAiB,CAAC2B,MAAlB,CAAyBH,OAAzB;IACAC,yBAAyB,CAACG,SAA1B,CAAoCJ,OAApC;EACH,CAHD;AAIH;;AAED,SAASD,mBAAT"},"metadata":{},"sourceType":"module"}