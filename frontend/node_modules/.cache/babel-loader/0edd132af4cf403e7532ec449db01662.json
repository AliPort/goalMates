{"ast":null,"code":"import sync, { cancelSync } from 'framesync';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { env } from '../utils/process.mjs';\nimport { invariant } from 'hey-listen';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createElement } from 'react';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\n\nconst visualElement = _ref => {\n  let {\n    treeType = \"\",\n    build,\n    getBaseTarget,\n    makeTargetAnimatable,\n    measureViewportBox,\n    render: renderInstance,\n    readValueFromInstance,\n    removeValueFromRenderState,\n    sortNodePosition,\n    scrapeMotionValuesFromProps\n  } = _ref;\n  return function (_ref2) {\n    let {\n      parent,\n      props,\n      presenceId,\n      blockInitialAnimation,\n      visualState,\n      reducedMotionConfig\n    } = _ref2;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isMounted = false;\n    const {\n      latestValues,\n      renderState\n    } = visualState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n\n    let instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender\n     */\n\n    const lifecycles = createLifecycles();\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n\n    const values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n\n    const valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n\n    let prevMotionValues = {};\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n\n    const baseTarget = { ...latestValues\n    }; // Internal methods ========================\n\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n\n    let removeFromVariantTree;\n    /**\n     * Render the element with the latest styles outside of the React\n     * render lifecycle\n     */\n\n    function render() {\n      if (!instance || !isMounted) return;\n      triggerBuild();\n      renderInstance(instance, renderState, props.style, element.projection);\n    }\n\n    function triggerBuild() {\n      build(element, renderState, latestValues, options, props);\n    }\n\n    function update() {\n      lifecycles.notifyUpdate(latestValues);\n    }\n    /**\n     *\n     */\n\n\n    function bindToMotionValue(key, value) {\n      const removeOnChange = value.onChange(latestValue => {\n        latestValues[key] = latestValue;\n        props.onUpdate && sync.update(update, false, true);\n      });\n      const removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n      valueSubscriptions.set(key, () => {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n\n\n    const {\n      willChange,\n      ...initialMotionValues\n    } = scrapeMotionValuesFromProps(props);\n\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n    /**\n     * Update external values with initial values\n     */\n\n\n    if (props.values) {\n      for (const key in props.values) {\n        const value = props.values[key];\n\n        if (latestValues[key] !== undefined && isMotionValue(value)) {\n          value.set(latestValues[key]);\n        }\n      }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n\n\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    const element = {\n      treeType,\n\n      /**\n       * This is a mirror of the internal instance prop, which keeps\n       * VisualElement type-compatible with React's RefObject.\n       */\n      current: null,\n\n      /**\n       * The depth of this visual element within the visual element tree.\n       */\n      depth: parent ? parent.depth + 1 : 0,\n      parent,\n      children: new Set(),\n\n      /**\n       *\n       */\n      presenceId,\n      shouldReduceMotion: null,\n\n      /**\n       * If this component is part of the variant tree, it should track\n       * any children that are also part of the tree. This is essentially\n       * a shadow tree to simplify logic around how to stagger over children.\n       */\n      variantChildren: isVariantNode$1 ? new Set() : undefined,\n\n      /**\n       * Whether this instance is visible. This can be changed imperatively\n       * by the projection tree, is analogous to CSS's visibility in that\n       * hidden elements should take up layout, and needs enacting by the configured\n       * render function.\n       */\n      isVisible: undefined,\n\n      /**\n       * Normally, if a component is controlled by a parent's variants, it can\n       * rely on that ancestor to trigger animations further down the tree.\n       * However, if a component is created after its parent is mounted, the parent\n       * won't trigger that mount animation so the child needs to.\n       *\n       * TODO: This might be better replaced with a method isParentMounted\n       */\n      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n\n      /**\n       * This can be set by AnimatePresence to force components that mount\n       * at the same time as it to mount as if they have initial={false} set.\n       */\n      blockInitialAnimation,\n\n      /**\n       * Determine whether this component has mounted yet. This is mostly used\n       * by variant children to determine whether they need to trigger their\n       * own animations on mount.\n       */\n      isMounted: () => Boolean(instance),\n\n      mount(newInstance) {\n        isMounted = true;\n        instance = element.current = newInstance;\n\n        if (element.projection) {\n          element.projection.mount(newInstance);\n        }\n\n        if (isVariantNode$1 && parent && !isControllingVariants$1) {\n          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n        }\n\n        values.forEach((value, key) => bindToMotionValue(key, value));\n\n        if (!hasReducedMotionListener.current) {\n          initPrefersReducedMotion();\n        }\n\n        element.shouldReduceMotion = reducedMotionConfig === \"never\" ? false : reducedMotionConfig === \"always\" ? true : prefersReducedMotion.current;\n        parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n        element.setProps(props);\n      },\n\n      /**\n       *\n       */\n      unmount() {\n        var _a;\n\n        (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(update);\n        cancelSync.render(render);\n        valueSubscriptions.forEach(remove => remove());\n        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n        parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n        lifecycles.clearAllListeners();\n        instance = undefined;\n        isMounted = false;\n      },\n\n      loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n        const features = [];\n        /**\n         * If we're in development mode, check to make sure we're not rendering a motion component\n         * as a child of LazyMotion, as this will break the file-size benefits of using it.\n         */\n\n        if (env !== \"production\" && preloadedFeatures && isStrict) {\n          invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n        }\n\n        for (let i = 0; i < numFeatures; i++) {\n          const name = featureNames[i];\n          const {\n            isEnabled,\n            Component\n          } = featureDefinitions[name];\n          /**\n           * It might be possible in the future to use this moment to\n           * dynamically request functionality. In initial tests this\n           * was producing a lot of duplication amongst bundles.\n           */\n\n          if (isEnabled(renderedProps) && Component) {\n            features.push(createElement(Component, {\n              key: name,\n              ...renderedProps,\n              visualElement: element\n            }));\n          }\n        }\n\n        if (!element.projection && ProjectionNodeConstructor) {\n          element.projection = new ProjectionNodeConstructor(projectionId, element.getLatestValues(), parent && parent.projection);\n          const {\n            layoutId,\n            layout,\n            drag,\n            dragConstraints,\n            layoutScroll\n          } = renderedProps;\n          element.projection.setOptions({\n            layoutId,\n            layout,\n            alwaysMeasureLayout: Boolean(drag) || dragConstraints && isRefObject(dragConstraints),\n            visualElement: element,\n            scheduleRender: () => element.scheduleRender(),\n\n            /**\n             * TODO: Update options in an effect. This could be tricky as it'll be too late\n             * to update by the time layout animations run.\n             * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n             * ensuring it gets called if there's no potential layout animations.\n             *\n             */\n            animationType: typeof layout === \"string\" ? layout : \"both\",\n            initialPromotionConfig: initialLayoutGroupConfig,\n            layoutScroll\n          });\n        }\n\n        return features;\n      },\n\n      /**\n       * Add a child visual element to our set of children.\n       */\n      addVariantChild(child) {\n        var _a;\n\n        const closestVariantNode = element.getClosestVariantNode();\n\n        if (closestVariantNode) {\n          (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n          return () => closestVariantNode.variantChildren.delete(child);\n        }\n      },\n\n      sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!sortNodePosition || treeType !== other.treeType) return 0;\n        return sortNodePosition(element.getInstance(), other.getInstance());\n      },\n\n      /**\n       * Returns the closest variant node in the tree starting from\n       * this visual element.\n       */\n      getClosestVariantNode: () => isVariantNode$1 ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode(),\n\n      /**\n       * Expose the latest layoutId prop.\n       */\n      getLayoutId: () => props.layoutId,\n\n      /**\n       * Returns the current instance.\n       */\n      getInstance: () => instance,\n\n      /**\n       * Get/set the latest static values.\n       */\n      getStaticValue: key => latestValues[key],\n      setStaticValue: (key, value) => latestValues[key] = value,\n\n      /**\n       * Returns the latest motion value state. Currently only used to take\n       * a snapshot of the visual element - perhaps this can return the whole\n       * visual state\n       */\n      getLatestValues: () => latestValues,\n\n      /**\n       * Set the visiblity of the visual element. If it's changed, schedule\n       * a render to reflect these changes.\n       */\n      setVisibility(visibility) {\n        if (element.isVisible === visibility) return;\n        element.isVisible = visibility;\n        element.scheduleRender();\n      },\n\n      /**\n       * Make a target animatable by Popmotion. For instance, if we're\n       * trying to animate width from 100px to 100vw we need to measure 100vw\n       * in pixels to determine what we really need to animate to. This is also\n       * pluggable to support Framer's custom value types like Color,\n       * and CSS variables.\n       */\n      makeTargetAnimatable(target) {\n        let canMutate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return makeTargetAnimatable(element, target, props, canMutate);\n      },\n\n      /**\n       * Measure the current viewport box with or without transforms.\n       * Only measures axis-aligned boxes, rotate and skew must be manually\n       * removed with a re-render to work.\n       */\n      measureViewportBox() {\n        return measureViewportBox(instance, props);\n      },\n\n      // Motion values ========================\n\n      /**\n       * Add a motion value and bind it to this visual element.\n       */\n      addValue(key, value) {\n        // Remove existing value if it exists\n        if (element.hasValue(key)) element.removeValue(key);\n        values.set(key, value);\n        latestValues[key] = value.get();\n        bindToMotionValue(key, value);\n      },\n\n      /**\n       * Remove a motion value and unbind any active subscriptions.\n       */\n      removeValue(key) {\n        var _a;\n\n        values.delete(key);\n        (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        valueSubscriptions.delete(key);\n        delete latestValues[key];\n        removeValueFromRenderState(key, renderState);\n      },\n\n      /**\n       * Check whether we have a motion value for this key\n       */\n      hasValue: key => values.has(key),\n\n      /**\n       * Get a motion value for this key. If called with a default\n       * value, we'll create one if none exists.\n       */\n      getValue(key, defaultValue) {\n        if (props.values && props.values[key]) {\n          return props.values[key];\n        }\n\n        let value = values.get(key);\n\n        if (value === undefined && defaultValue !== undefined) {\n          value = motionValue(defaultValue);\n          element.addValue(key, value);\n        }\n\n        return value;\n      },\n\n      /**\n       * Iterate over our motion values.\n       */\n      forEachValue: callback => values.forEach(callback),\n\n      /**\n       * If we're trying to animate to a previously unencountered value,\n       * we need to check for it in our state and as a last resort read it\n       * directly from the instance (which might have performance implications).\n       */\n      readValue: key => latestValues[key] !== undefined ? latestValues[key] : readValueFromInstance(instance, key, options),\n\n      /**\n       * Set the base target to later animate back to. This is currently\n       * only hydrated on creation and when we first read a value.\n       */\n      setBaseTarget(key, value) {\n        baseTarget[key] = value;\n      },\n\n      /**\n       * Find the base target for a value thats been removed from all animation\n       * props.\n       */\n      getBaseTarget(key) {\n        if (getBaseTarget) {\n          const target = getBaseTarget(props, key);\n          if (target !== undefined && !isMotionValue(target)) return target;\n        }\n\n        return baseTarget[key];\n      },\n\n      // Lifecyles ========================\n      ...lifecycles,\n\n      /**\n       * Build the renderer state based on the latest visual state.\n       */\n      build() {\n        triggerBuild();\n        return renderState;\n      },\n\n      /**\n       * Schedule a render on the next animation frame.\n       */\n      scheduleRender() {\n        sync.render(render, false, true);\n      },\n\n      /**\n       * Synchronously fire render. It's prefered that we batch renders but\n       * in many circumstances, like layout measurement, we need to run this\n       * synchronously. However in those instances other measures should be taken\n       * to batch reads/writes.\n       */\n      syncRender: render,\n\n      /**\n       * Update the provided props. Ensure any newly-added motion values are\n       * added to our map, old ones removed, and listeners updated.\n       */\n      setProps(newProps) {\n        if (newProps.transformTemplate || props.transformTemplate) {\n          element.scheduleRender();\n        }\n\n        props = newProps;\n        lifecycles.updatePropListeners(newProps);\n        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n      },\n\n      getProps: () => props,\n      // Variants ==============================\n\n      /**\n       * Returns the variant definition with a given name.\n       */\n      getVariant: name => {\n        var _a;\n\n        return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n      },\n\n      /**\n       * Returns the defined default transition on this component.\n       */\n      getDefaultTransition: () => props.transition,\n      getTransformPagePoint: () => {\n        return props.transformPagePoint;\n      },\n\n      /**\n       * Used by child variant nodes to get the closest ancestor variant props.\n       */\n      getVariantContext() {\n        let startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n\n        if (!isControllingVariants$1) {\n          const context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n\n          if (props.initial !== undefined) {\n            context.initial = props.initial;\n          }\n\n          return context;\n        }\n\n        const context = {};\n\n        for (let i = 0; i < numVariantProps; i++) {\n          const name = variantProps[i];\n          const prop = props[name];\n\n          if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n          }\n        }\n\n        return context;\n      }\n\n    };\n    return element;\n  };\n};\n\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\nexport { visualElement };","map":{"version":3,"names":["sync","cancelSync","initPrefersReducedMotion","hasReducedMotionListener","prefersReducedMotion","motionValue","isWillChangeMotionValue","isMotionValue","variantPriorityOrder","isVariantLabel","createLifecycles","updateMotionValuesFromProps","isControllingVariants","isVariantNode","env","invariant","featureDefinitions","createElement","isRefObject","featureNames","Object","keys","numFeatures","length","visualElement","treeType","build","getBaseTarget","makeTargetAnimatable","measureViewportBox","render","renderInstance","readValueFromInstance","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","parent","props","presenceId","blockInitialAnimation","visualState","reducedMotionConfig","options","isMounted","latestValues","renderState","instance","lifecycles","values","Map","valueSubscriptions","prevMotionValues","baseTarget","removeFromVariantTree","triggerBuild","style","element","projection","update","notifyUpdate","bindToMotionValue","key","value","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","scheduleRender","set","willChange","initialMotionValues","undefined","add","isControllingVariants$1","isVariantNode$1","current","depth","children","Set","shouldReduceMotion","variantChildren","isVisible","manuallyAnimateOnMount","Boolean","mount","newInstance","addVariantChild","forEach","setProps","unmount","_a","remove","delete","clearAllListeners","loadFeatures","renderedProps","isStrict","preloadedFeatures","projectionId","ProjectionNodeConstructor","initialLayoutGroupConfig","features","i","name","isEnabled","Component","push","getLatestValues","layoutId","layout","drag","dragConstraints","layoutScroll","setOptions","alwaysMeasureLayout","animationType","initialPromotionConfig","child","closestVariantNode","getClosestVariantNode","other","getInstance","getLayoutId","getStaticValue","setStaticValue","setVisibility","visibility","target","canMutate","addValue","hasValue","removeValue","get","has","getValue","defaultValue","forEachValue","callback","readValue","setBaseTarget","syncRender","newProps","transformTemplate","updatePropListeners","getProps","getVariant","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getVariantContext","startAtParent","context","initial","numVariantProps","variantProps","prop"],"sources":["/Users/elizabethptack/Desktop/UWM/msp2/goalMates/frontend/node_modules/framer-motion/dist/es/render/index.mjs"],"sourcesContent":["import sync, { cancelSync } from 'framesync';\nimport { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { isVariantLabel } from './utils/is-variant-label.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { env } from '../utils/process.mjs';\nimport { invariant } from 'hey-listen';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { createElement } from 'react';\nimport { isRefObject } from '../utils/is-ref-object.mjs';\n\nconst featureNames = Object.keys(featureDefinitions);\nconst numFeatures = featureNames.length;\nconst visualElement = ({ treeType = \"\", build, getBaseTarget, makeTargetAnimatable, measureViewportBox, render: renderInstance, readValueFromInstance, removeValueFromRenderState, sortNodePosition, scrapeMotionValuesFromProps, }) => ({ parent, props, presenceId, blockInitialAnimation, visualState, reducedMotionConfig, }, options = {}) => {\n    let isMounted = false;\n    const { latestValues, renderState } = visualState;\n    /**\n     * The instance of the render-specific node that will be hydrated by the\n     * exposed React ref. So for example, this visual element can host a\n     * HTMLElement, plain object, or Three.js object. The functions provided\n     * in VisualElementConfig allow us to interface with this instance.\n     */\n    let instance;\n    /**\n     * Manages the subscriptions for a visual element's lifecycle, for instance\n     * onRender\n     */\n    const lifecycles = createLifecycles();\n    /**\n     * A map of all motion values attached to this visual element. Motion\n     * values are source of truth for any given animated value. A motion\n     * value might be provided externally by the component via props.\n     */\n    const values = new Map();\n    /**\n     * A map of every subscription that binds the provided or generated\n     * motion values onChange listeners to this visual element.\n     */\n    const valueSubscriptions = new Map();\n    /**\n     * A reference to the previously-provided motion values as returned\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\n     * if any motion values need to be removed after props are updated.\n     */\n    let prevMotionValues = {};\n    /**\n     * When values are removed from all animation props we need to search\n     * for a fallback value to animate to. These values are tracked in baseTarget.\n     */\n    const baseTarget = {\n        ...latestValues,\n    };\n    // Internal methods ========================\n    /**\n     * On mount, this will be hydrated with a callback to disconnect\n     * this visual element from its parent on unmount.\n     */\n    let removeFromVariantTree;\n    /**\n     * Render the element with the latest styles outside of the React\n     * render lifecycle\n     */\n    function render() {\n        if (!instance || !isMounted)\n            return;\n        triggerBuild();\n        renderInstance(instance, renderState, props.style, element.projection);\n    }\n    function triggerBuild() {\n        build(element, renderState, latestValues, options, props);\n    }\n    function update() {\n        lifecycles.notifyUpdate(latestValues);\n    }\n    /**\n     *\n     */\n    function bindToMotionValue(key, value) {\n        const removeOnChange = value.onChange((latestValue) => {\n            latestValues[key] = latestValue;\n            props.onUpdate && sync.update(update, false, true);\n        });\n        const removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n        valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n        });\n    }\n    /**\n     * Any motion values that are provided to the element when created\n     * aren't yet bound to the element, as this would technically be impure.\n     * However, we iterate through the motion values and set them to the\n     * initial values for this component.\n     *\n     * TODO: This is impure and we should look at changing this to run on mount.\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\n     * more a reflection of the test.\n     */\n    const { willChange, ...initialMotionValues } = scrapeMotionValuesFromProps(props);\n    for (const key in initialMotionValues) {\n        const value = initialMotionValues[key];\n        if (latestValues[key] !== undefined && isMotionValue(value)) {\n            value.set(latestValues[key], false);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n        }\n    }\n    /**\n     * Update external values with initial values\n     */\n    if (props.values) {\n        for (const key in props.values) {\n            const value = props.values[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key]);\n            }\n        }\n    }\n    /**\n     * Determine what role this visual element should take in the variant tree.\n     */\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    const element = {\n        treeType,\n        /**\n         * This is a mirror of the internal instance prop, which keeps\n         * VisualElement type-compatible with React's RefObject.\n         */\n        current: null,\n        /**\n         * The depth of this visual element within the visual element tree.\n         */\n        depth: parent ? parent.depth + 1 : 0,\n        parent,\n        children: new Set(),\n        /**\n         *\n         */\n        presenceId,\n        shouldReduceMotion: null,\n        /**\n         * If this component is part of the variant tree, it should track\n         * any children that are also part of the tree. This is essentially\n         * a shadow tree to simplify logic around how to stagger over children.\n         */\n        variantChildren: isVariantNode$1 ? new Set() : undefined,\n        /**\n         * Whether this instance is visible. This can be changed imperatively\n         * by the projection tree, is analogous to CSS's visibility in that\n         * hidden elements should take up layout, and needs enacting by the configured\n         * render function.\n         */\n        isVisible: undefined,\n        /**\n         * Normally, if a component is controlled by a parent's variants, it can\n         * rely on that ancestor to trigger animations further down the tree.\n         * However, if a component is created after its parent is mounted, the parent\n         * won't trigger that mount animation so the child needs to.\n         *\n         * TODO: This might be better replaced with a method isParentMounted\n         */\n        manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n        /**\n         * This can be set by AnimatePresence to force components that mount\n         * at the same time as it to mount as if they have initial={false} set.\n         */\n        blockInitialAnimation,\n        /**\n         * Determine whether this component has mounted yet. This is mostly used\n         * by variant children to determine whether they need to trigger their\n         * own animations on mount.\n         */\n        isMounted: () => Boolean(instance),\n        mount(newInstance) {\n            isMounted = true;\n            instance = element.current = newInstance;\n            if (element.projection) {\n                element.projection.mount(newInstance);\n            }\n            if (isVariantNode$1 && parent && !isControllingVariants$1) {\n                removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n            }\n            values.forEach((value, key) => bindToMotionValue(key, value));\n            if (!hasReducedMotionListener.current) {\n                initPrefersReducedMotion();\n            }\n            element.shouldReduceMotion =\n                reducedMotionConfig === \"never\"\n                    ? false\n                    : reducedMotionConfig === \"always\"\n                        ? true\n                        : prefersReducedMotion.current;\n            parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n            element.setProps(props);\n        },\n        /**\n         *\n         */\n        unmount() {\n            var _a;\n            (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n            cancelSync.update(update);\n            cancelSync.render(render);\n            valueSubscriptions.forEach((remove) => remove());\n            removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n            parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n            lifecycles.clearAllListeners();\n            instance = undefined;\n            isMounted = false;\n        },\n        loadFeatures(renderedProps, isStrict, preloadedFeatures, projectionId, ProjectionNodeConstructor, initialLayoutGroupConfig) {\n            const features = [];\n            /**\n             * If we're in development mode, check to make sure we're not rendering a motion component\n             * as a child of LazyMotion, as this will break the file-size benefits of using it.\n             */\n            if (env !== \"production\" && preloadedFeatures && isStrict) {\n                invariant(false, \"You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.\");\n            }\n            for (let i = 0; i < numFeatures; i++) {\n                const name = featureNames[i];\n                const { isEnabled, Component } = featureDefinitions[name];\n                /**\n                 * It might be possible in the future to use this moment to\n                 * dynamically request functionality. In initial tests this\n                 * was producing a lot of duplication amongst bundles.\n                 */\n                if (isEnabled(renderedProps) && Component) {\n                    features.push(createElement(Component, {\n                        key: name,\n                        ...renderedProps,\n                        visualElement: element,\n                    }));\n                }\n            }\n            if (!element.projection && ProjectionNodeConstructor) {\n                element.projection = new ProjectionNodeConstructor(projectionId, element.getLatestValues(), parent && parent.projection);\n                const { layoutId, layout, drag, dragConstraints, layoutScroll, } = renderedProps;\n                element.projection.setOptions({\n                    layoutId,\n                    layout,\n                    alwaysMeasureLayout: Boolean(drag) ||\n                        (dragConstraints && isRefObject(dragConstraints)),\n                    visualElement: element,\n                    scheduleRender: () => element.scheduleRender(),\n                    /**\n                     * TODO: Update options in an effect. This could be tricky as it'll be too late\n                     * to update by the time layout animations run.\n                     * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,\n                     * ensuring it gets called if there's no potential layout animations.\n                     *\n                     */\n                    animationType: typeof layout === \"string\" ? layout : \"both\",\n                    initialPromotionConfig: initialLayoutGroupConfig,\n                    layoutScroll,\n                });\n            }\n            return features;\n        },\n        /**\n         * Add a child visual element to our set of children.\n         */\n        addVariantChild(child) {\n            var _a;\n            const closestVariantNode = element.getClosestVariantNode();\n            if (closestVariantNode) {\n                (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n                return () => closestVariantNode.variantChildren.delete(child);\n            }\n        },\n        sortNodePosition(other) {\n            /**\n             * If these nodes aren't even of the same type we can't compare their depth.\n             */\n            if (!sortNodePosition || treeType !== other.treeType)\n                return 0;\n            return sortNodePosition(element.getInstance(), other.getInstance());\n        },\n        /**\n         * Returns the closest variant node in the tree starting from\n         * this visual element.\n         */\n        getClosestVariantNode: () => isVariantNode$1 ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode(),\n        /**\n         * Expose the latest layoutId prop.\n         */\n        getLayoutId: () => props.layoutId,\n        /**\n         * Returns the current instance.\n         */\n        getInstance: () => instance,\n        /**\n         * Get/set the latest static values.\n         */\n        getStaticValue: (key) => latestValues[key],\n        setStaticValue: (key, value) => (latestValues[key] = value),\n        /**\n         * Returns the latest motion value state. Currently only used to take\n         * a snapshot of the visual element - perhaps this can return the whole\n         * visual state\n         */\n        getLatestValues: () => latestValues,\n        /**\n         * Set the visiblity of the visual element. If it's changed, schedule\n         * a render to reflect these changes.\n         */\n        setVisibility(visibility) {\n            if (element.isVisible === visibility)\n                return;\n            element.isVisible = visibility;\n            element.scheduleRender();\n        },\n        /**\n         * Make a target animatable by Popmotion. For instance, if we're\n         * trying to animate width from 100px to 100vw we need to measure 100vw\n         * in pixels to determine what we really need to animate to. This is also\n         * pluggable to support Framer's custom value types like Color,\n         * and CSS variables.\n         */\n        makeTargetAnimatable(target, canMutate = true) {\n            return makeTargetAnimatable(element, target, props, canMutate);\n        },\n        /**\n         * Measure the current viewport box with or without transforms.\n         * Only measures axis-aligned boxes, rotate and skew must be manually\n         * removed with a re-render to work.\n         */\n        measureViewportBox() {\n            return measureViewportBox(instance, props);\n        },\n        // Motion values ========================\n        /**\n         * Add a motion value and bind it to this visual element.\n         */\n        addValue(key, value) {\n            // Remove existing value if it exists\n            if (element.hasValue(key))\n                element.removeValue(key);\n            values.set(key, value);\n            latestValues[key] = value.get();\n            bindToMotionValue(key, value);\n        },\n        /**\n         * Remove a motion value and unbind any active subscriptions.\n         */\n        removeValue(key) {\n            var _a;\n            values.delete(key);\n            (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n            valueSubscriptions.delete(key);\n            delete latestValues[key];\n            removeValueFromRenderState(key, renderState);\n        },\n        /**\n         * Check whether we have a motion value for this key\n         */\n        hasValue: (key) => values.has(key),\n        /**\n         * Get a motion value for this key. If called with a default\n         * value, we'll create one if none exists.\n         */\n        getValue(key, defaultValue) {\n            if (props.values && props.values[key]) {\n                return props.values[key];\n            }\n            let value = values.get(key);\n            if (value === undefined && defaultValue !== undefined) {\n                value = motionValue(defaultValue);\n                element.addValue(key, value);\n            }\n            return value;\n        },\n        /**\n         * Iterate over our motion values.\n         */\n        forEachValue: (callback) => values.forEach(callback),\n        /**\n         * If we're trying to animate to a previously unencountered value,\n         * we need to check for it in our state and as a last resort read it\n         * directly from the instance (which might have performance implications).\n         */\n        readValue: (key) => latestValues[key] !== undefined\n            ? latestValues[key]\n            : readValueFromInstance(instance, key, options),\n        /**\n         * Set the base target to later animate back to. This is currently\n         * only hydrated on creation and when we first read a value.\n         */\n        setBaseTarget(key, value) {\n            baseTarget[key] = value;\n        },\n        /**\n         * Find the base target for a value thats been removed from all animation\n         * props.\n         */\n        getBaseTarget(key) {\n            if (getBaseTarget) {\n                const target = getBaseTarget(props, key);\n                if (target !== undefined && !isMotionValue(target))\n                    return target;\n            }\n            return baseTarget[key];\n        },\n        // Lifecyles ========================\n        ...lifecycles,\n        /**\n         * Build the renderer state based on the latest visual state.\n         */\n        build() {\n            triggerBuild();\n            return renderState;\n        },\n        /**\n         * Schedule a render on the next animation frame.\n         */\n        scheduleRender() {\n            sync.render(render, false, true);\n        },\n        /**\n         * Synchronously fire render. It's prefered that we batch renders but\n         * in many circumstances, like layout measurement, we need to run this\n         * synchronously. However in those instances other measures should be taken\n         * to batch reads/writes.\n         */\n        syncRender: render,\n        /**\n         * Update the provided props. Ensure any newly-added motion values are\n         * added to our map, old ones removed, and listeners updated.\n         */\n        setProps(newProps) {\n            if (newProps.transformTemplate || props.transformTemplate) {\n                element.scheduleRender();\n            }\n            props = newProps;\n            lifecycles.updatePropListeners(newProps);\n            prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n        },\n        getProps: () => props,\n        // Variants ==============================\n        /**\n         * Returns the variant definition with a given name.\n         */\n        getVariant: (name) => { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; },\n        /**\n         * Returns the defined default transition on this component.\n         */\n        getDefaultTransition: () => props.transition,\n        getTransformPagePoint: () => {\n            return props.transformPagePoint;\n        },\n        /**\n         * Used by child variant nodes to get the closest ancestor variant props.\n         */\n        getVariantContext(startAtParent = false) {\n            if (startAtParent)\n                return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n            if (!isControllingVariants$1) {\n                const context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n                if (props.initial !== undefined) {\n                    context.initial = props.initial;\n                }\n                return context;\n            }\n            const context = {};\n            for (let i = 0; i < numVariantProps; i++) {\n                const name = variantProps[i];\n                const prop = props[name];\n                if (isVariantLabel(prop) || prop === false) {\n                    context[name] = prop;\n                }\n            }\n            return context;\n        },\n    };\n    return element;\n};\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\n\nexport { visualElement };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}