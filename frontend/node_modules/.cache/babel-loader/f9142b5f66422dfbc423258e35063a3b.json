{"ast":null,"code":"import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariable } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n  const {\n    style,\n    vars,\n    transform,\n    transformKeys,\n    transformOrigin\n  } = state;\n  transformKeys.length = 0; // Track whether we encounter any transform or transformOrigin values.\n\n  let hasTransform = false;\n  let hasTransformOrigin = false; // Does the calculated transform essentially equal \"none\"?\n\n  let transformIsNone = true;\n  /**\n   * Loop over all our latest animated values and decide whether to handle them\n   * as a style or CSS variable.\n   *\n   * Transforms and transform origins are kept seperately for further processing.\n   */\n\n  for (const key in latestValues) {\n    const value = latestValues[key];\n    /**\n     * If this is a CSS variable we don't do any further processing.\n     */\n\n    if (isCSSVariable(key)) {\n      vars[key] = value;\n      continue;\n    } // Convert the value to its default value type, ie 0 -> \"0px\"\n\n\n    const valueType = numberValueTypes[key];\n    const valueAsType = getValueAsType(value, valueType);\n\n    if (transformProps.has(key)) {\n      // If this is a transform, flag to enable further transform processing\n      hasTransform = true;\n      transform[key] = valueAsType;\n      transformKeys.push(key); // If we already know we have a non-default transform, early return\n\n      if (!transformIsNone) continue; // Otherwise check to see if this is a default transform\n\n      if (value !== (valueType.default || 0)) transformIsNone = false;\n    } else if (key.startsWith(\"origin\")) {\n      // If this is a transform origin, flag and enable further transform-origin processing\n      hasTransformOrigin = true;\n      transformOrigin[key] = valueAsType;\n    } else {\n      style[key] = valueAsType;\n    }\n  }\n\n  if (!latestValues.transform) {\n    if (hasTransform || transformTemplate) {\n      style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\n    } else if (style.transform) {\n      /**\n       * If we have previously created a transform but currently don't have any,\n       * reset transform style to none.\n       */\n      style.transform = \"none\";\n    }\n  }\n  /**\n   * Build a transformOrigin style. Uses the same defaults as the browser for\n   * undefined origins.\n   */\n\n\n  if (hasTransformOrigin) {\n    const {\n      originX = \"50%\",\n      originY = \"50%\",\n      originZ = 0\n    } = transformOrigin;\n    style.transformOrigin = `${originX} ${originY} ${originZ}`;\n  }\n}\n\nexport { buildHTMLStyles };","map":{"version":3,"names":["buildTransform","isCSSVariable","transformProps","getValueAsType","numberValueTypes","buildHTMLStyles","state","latestValues","options","transformTemplate","style","vars","transform","transformKeys","transformOrigin","length","hasTransform","hasTransformOrigin","transformIsNone","key","value","valueType","valueAsType","has","push","default","startsWith","originX","originY","originZ"],"sources":["/Users/elizabethptack/Desktop/UWM/msp2/goalMates/frontend/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs"],"sourcesContent":["import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariable } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, options, transformTemplate) {\n    const { style, vars, transform, transformKeys, transformOrigin } = state;\n    transformKeys.length = 0;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    // Does the calculated transform essentially equal \"none\"?\n    let transformIsNone = true;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept seperately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        /**\n         * If this is a CSS variable we don't do any further processing.\n         */\n        if (isCSSVariable(key)) {\n            vars[key] = value;\n            continue;\n        }\n        // Convert the value to its default value type, ie 0 -> \"0px\"\n        const valueType = numberValueTypes[key];\n        const valueAsType = getValueAsType(value, valueType);\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            transform[key] = valueAsType;\n            transformKeys.push(key);\n            // If we already know we have a non-default transform, early return\n            if (!transformIsNone)\n                continue;\n            // Otherwise check to see if this is a default transform\n            if (value !== (valueType.default || 0))\n                transformIsNone = false;\n        }\n        else if (key.startsWith(\"origin\")) {\n            // If this is a transform origin, flag and enable further transform-origin processing\n            hasTransformOrigin = true;\n            transformOrigin[key] = valueAsType;\n        }\n        else {\n            style[key] = valueAsType;\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(state, options, transformIsNone, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,uBAA/B;AACA,SAASC,aAAT,QAA8B,qCAA9B;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,SAASC,gBAAT,QAAiC,kCAAjC;;AAEA,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,YAAhC,EAA8CC,OAA9C,EAAuDC,iBAAvD,EAA0E;EACtE,MAAM;IAAEC,KAAF;IAASC,IAAT;IAAeC,SAAf;IAA0BC,aAA1B;IAAyCC;EAAzC,IAA6DR,KAAnE;EACAO,aAAa,CAACE,MAAd,GAAuB,CAAvB,CAFsE,CAGtE;;EACA,IAAIC,YAAY,GAAG,KAAnB;EACA,IAAIC,kBAAkB,GAAG,KAAzB,CALsE,CAMtE;;EACA,IAAIC,eAAe,GAAG,IAAtB;EACA;AACJ;AACA;AACA;AACA;AACA;;EACI,KAAK,MAAMC,GAAX,IAAkBZ,YAAlB,EAAgC;IAC5B,MAAMa,KAAK,GAAGb,YAAY,CAACY,GAAD,CAA1B;IACA;AACR;AACA;;IACQ,IAAIlB,aAAa,CAACkB,GAAD,CAAjB,EAAwB;MACpBR,IAAI,CAACQ,GAAD,CAAJ,GAAYC,KAAZ;MACA;IACH,CAR2B,CAS5B;;;IACA,MAAMC,SAAS,GAAGjB,gBAAgB,CAACe,GAAD,CAAlC;IACA,MAAMG,WAAW,GAAGnB,cAAc,CAACiB,KAAD,EAAQC,SAAR,CAAlC;;IACA,IAAInB,cAAc,CAACqB,GAAf,CAAmBJ,GAAnB,CAAJ,EAA6B;MACzB;MACAH,YAAY,GAAG,IAAf;MACAJ,SAAS,CAACO,GAAD,CAAT,GAAiBG,WAAjB;MACAT,aAAa,CAACW,IAAd,CAAmBL,GAAnB,EAJyB,CAKzB;;MACA,IAAI,CAACD,eAAL,EACI,SAPqB,CAQzB;;MACA,IAAIE,KAAK,MAAMC,SAAS,CAACI,OAAV,IAAqB,CAA3B,CAAT,EACIP,eAAe,GAAG,KAAlB;IACP,CAXD,MAYK,IAAIC,GAAG,CAACO,UAAJ,CAAe,QAAf,CAAJ,EAA8B;MAC/B;MACAT,kBAAkB,GAAG,IAArB;MACAH,eAAe,CAACK,GAAD,CAAf,GAAuBG,WAAvB;IACH,CAJI,MAKA;MACDZ,KAAK,CAACS,GAAD,CAAL,GAAaG,WAAb;IACH;EACJ;;EACD,IAAI,CAACf,YAAY,CAACK,SAAlB,EAA6B;IACzB,IAAII,YAAY,IAAIP,iBAApB,EAAuC;MACnCC,KAAK,CAACE,SAAN,GAAkBZ,cAAc,CAACM,KAAD,EAAQE,OAAR,EAAiBU,eAAjB,EAAkCT,iBAAlC,CAAhC;IACH,CAFD,MAGK,IAAIC,KAAK,CAACE,SAAV,EAAqB;MACtB;AACZ;AACA;AACA;MACYF,KAAK,CAACE,SAAN,GAAkB,MAAlB;IACH;EACJ;EACD;AACJ;AACA;AACA;;;EACI,IAAIK,kBAAJ,EAAwB;IACpB,MAAM;MAAEU,OAAO,GAAG,KAAZ;MAAmBC,OAAO,GAAG,KAA7B;MAAoCC,OAAO,GAAG;IAA9C,IAAqDf,eAA3D;IACAJ,KAAK,CAACI,eAAN,GAAyB,GAAEa,OAAQ,IAAGC,OAAQ,IAAGC,OAAQ,EAAzD;EACH;AACJ;;AAED,SAASxB,eAAT"},"metadata":{},"sourceType":"module"}