{"ast":null,"code":"import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\n\nfunction useMotionRef(visualState, visualElement, externalRef) {\n  return useCallback(instance => {\n    instance && visualState.mount && visualState.mount(instance);\n\n    if (visualElement) {\n      instance ? visualElement.mount(instance) : visualElement.unmount();\n    }\n\n    if (externalRef) {\n      if (typeof externalRef === \"function\") {\n        externalRef(instance);\n      } else if (isRefObject(externalRef)) {\n        externalRef.current = instance;\n      }\n    }\n  },\n  /**\n   * Only pass a new ref callback to React if we've received a visual element\n   * factory. Otherwise we'll be mounting/remounting every time externalRef\n   * or other dependencies change.\n   */\n  [visualElement]);\n}\n\nexport { useMotionRef };","map":{"version":3,"names":["useCallback","isRefObject","useMotionRef","visualState","visualElement","externalRef","instance","mount","unmount","current"],"sources":["/Users/elizabethptack/Desktop/UWM/msp2/goalMates/frontend/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs"],"sourcesContent":["import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,+BAA5B;AAEA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,WAAtB,EAAmCC,aAAnC,EAAkDC,WAAlD,EAA+D;EAC3D,OAAOL,WAAW,CAAEM,QAAD,IAAc;IAC7BA,QAAQ,IAAIH,WAAW,CAACI,KAAxB,IAAiCJ,WAAW,CAACI,KAAZ,CAAkBD,QAAlB,CAAjC;;IACA,IAAIF,aAAJ,EAAmB;MACfE,QAAQ,GACFF,aAAa,CAACG,KAAd,CAAoBD,QAApB,CADE,GAEFF,aAAa,CAACI,OAAd,EAFN;IAGH;;IACD,IAAIH,WAAJ,EAAiB;MACb,IAAI,OAAOA,WAAP,KAAuB,UAA3B,EAAuC;QACnCA,WAAW,CAACC,QAAD,CAAX;MACH,CAFD,MAGK,IAAIL,WAAW,CAACI,WAAD,CAAf,EAA8B;QAC/BA,WAAW,CAACI,OAAZ,GAAsBH,QAAtB;MACH;IACJ;EACJ,CAfiB;EAgBlB;AACJ;AACA;AACA;AACA;EACI,CAACF,aAAD,CArBkB,CAAlB;AAsBH;;AAED,SAASF,YAAT"},"metadata":{},"sourceType":"module"}