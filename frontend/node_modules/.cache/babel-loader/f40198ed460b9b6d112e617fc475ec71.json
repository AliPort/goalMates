{"ast":null,"code":"import * as React from 'react';\nimport { useState, useRef, useEffect } from 'react';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { loadFeatures } from '../../motion/features/load-features.mjs';\n/**\n * Used in conjunction with the `m` component to reduce bundle size.\n *\n * `m` is a version of the `motion` component that only loads functionality\n * critical for the initial render.\n *\n * `LazyMotion` can then be used to either synchronously or asynchronously\n * load animation and gesture support.\n *\n * ```jsx\n * // Synchronous loading\n * import { LazyMotion, m, domAnimations } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={domAnimations}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n *\n * // Asynchronous loading\n * import { LazyMotion, m } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={() => import('./path/to/domAnimations')}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n * ```\n *\n * @public\n */\n\nfunction LazyMotion(_ref) {\n  let {\n    children,\n    features,\n    strict = false\n  } = _ref;\n  const [, setIsLoaded] = useState(!isLazyBundle(features));\n  const loadedRenderer = useRef(undefined);\n  /**\n   * If this is a synchronous load, load features immediately\n   */\n\n  if (!isLazyBundle(features)) {\n    const {\n      renderer,\n      ...loadedFeatures\n    } = features;\n    loadedRenderer.current = renderer;\n    loadFeatures(loadedFeatures);\n  }\n\n  useEffect(() => {\n    if (isLazyBundle(features)) {\n      features().then(_ref2 => {\n        let {\n          renderer,\n          ...loadedFeatures\n        } = _ref2;\n        loadFeatures(loadedFeatures);\n        loadedRenderer.current = renderer;\n        setIsLoaded(true);\n      });\n    }\n  }, []);\n  return React.createElement(LazyContext.Provider, {\n    value: {\n      renderer: loadedRenderer.current,\n      strict\n    }\n  }, children);\n}\n\nfunction isLazyBundle(features) {\n  return typeof features === \"function\";\n}\n\nexport { LazyMotion };","map":{"version":3,"names":["React","useState","useRef","useEffect","LazyContext","loadFeatures","LazyMotion","children","features","strict","setIsLoaded","isLazyBundle","loadedRenderer","undefined","renderer","loadedFeatures","current","then","createElement","Provider","value"],"sources":["/Users/elizabethptack/Desktop/UWM/msp2/goalMates/frontend/node_modules/framer-motion/dist/es/components/LazyMotion/index.mjs"],"sourcesContent":["import * as React from 'react';\nimport { useState, useRef, useEffect } from 'react';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { loadFeatures } from '../../motion/features/load-features.mjs';\n\n/**\n * Used in conjunction with the `m` component to reduce bundle size.\n *\n * `m` is a version of the `motion` component that only loads functionality\n * critical for the initial render.\n *\n * `LazyMotion` can then be used to either synchronously or asynchronously\n * load animation and gesture support.\n *\n * ```jsx\n * // Synchronous loading\n * import { LazyMotion, m, domAnimations } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={domAnimations}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n *\n * // Asynchronous loading\n * import { LazyMotion, m } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={() => import('./path/to/domAnimations')}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction LazyMotion({ children, features, strict = false }) {\n    const [, setIsLoaded] = useState(!isLazyBundle(features));\n    const loadedRenderer = useRef(undefined);\n    /**\n     * If this is a synchronous load, load features immediately\n     */\n    if (!isLazyBundle(features)) {\n        const { renderer, ...loadedFeatures } = features;\n        loadedRenderer.current = renderer;\n        loadFeatures(loadedFeatures);\n    }\n    useEffect(() => {\n        if (isLazyBundle(features)) {\n            features().then(({ renderer, ...loadedFeatures }) => {\n                loadFeatures(loadedFeatures);\n                loadedRenderer.current = renderer;\n                setIsLoaded(true);\n            });\n        }\n    }, []);\n    return (React.createElement(LazyContext.Provider, { value: { renderer: loadedRenderer.current, strict } }, children));\n}\nfunction isLazyBundle(features) {\n    return typeof features === \"function\";\n}\n\nexport { LazyMotion };\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,YAAT,QAA6B,yCAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,OAA4D;EAAA,IAAxC;IAAEC,QAAF;IAAYC,QAAZ;IAAsBC,MAAM,GAAG;EAA/B,CAAwC;EACxD,MAAM,GAAGC,WAAH,IAAkBT,QAAQ,CAAC,CAACU,YAAY,CAACH,QAAD,CAAd,CAAhC;EACA,MAAMI,cAAc,GAAGV,MAAM,CAACW,SAAD,CAA7B;EACA;AACJ;AACA;;EACI,IAAI,CAACF,YAAY,CAACH,QAAD,CAAjB,EAA6B;IACzB,MAAM;MAAEM,QAAF;MAAY,GAAGC;IAAf,IAAkCP,QAAxC;IACAI,cAAc,CAACI,OAAf,GAAyBF,QAAzB;IACAT,YAAY,CAACU,cAAD,CAAZ;EACH;;EACDZ,SAAS,CAAC,MAAM;IACZ,IAAIQ,YAAY,CAACH,QAAD,CAAhB,EAA4B;MACxBA,QAAQ,GAAGS,IAAX,CAAgB,SAAqC;QAAA,IAApC;UAAEH,QAAF;UAAY,GAAGC;QAAf,CAAoC;QACjDV,YAAY,CAACU,cAAD,CAAZ;QACAH,cAAc,CAACI,OAAf,GAAyBF,QAAzB;QACAJ,WAAW,CAAC,IAAD,CAAX;MACH,CAJD;IAKH;EACJ,CARQ,EAQN,EARM,CAAT;EASA,OAAQV,KAAK,CAACkB,aAAN,CAAoBd,WAAW,CAACe,QAAhC,EAA0C;IAAEC,KAAK,EAAE;MAAEN,QAAQ,EAAEF,cAAc,CAACI,OAA3B;MAAoCP;IAApC;EAAT,CAA1C,EAAmGF,QAAnG,CAAR;AACH;;AACD,SAASI,YAAT,CAAsBH,QAAtB,EAAgC;EAC5B,OAAO,OAAOA,QAAP,KAAoB,UAA3B;AACH;;AAED,SAASF,UAAT"},"metadata":{},"sourceType":"module"}